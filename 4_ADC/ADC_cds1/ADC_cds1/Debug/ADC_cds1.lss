
ADC_cds1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008da  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080c  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000325  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013e  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4c d0       	rcall	.+152    	; 0x132 <main>
  9a:	53 c0       	rjmp	.+166    	; 0x142 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_adc>:
	}
}

int init_adc(void)
{
	ADMUX = 0x40;
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87;    // adc en
  a2:	87 e8       	ldi	r24, 0x87	; 135
  a4:	86 b9       	out	0x06, r24	; 6
}
  a6:	08 95       	ret

000000a8 <read_adc>:
unsigned short read_adc()
{
	unsigned char adc_low, adc_high;
	unsigned short value;

	ADCSRA |= 0x40;    // ADC start
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	86 b9       	out	0x06, r24	; 6
	// ADC Complete
	while((ADCSRA & 0x10) != 0x10);
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <read_adc+0x6>
	adc_low = ADCL;
  b2:	24 b1       	in	r18, 0x04	; 4
	adc_high = ADCH;
  b4:	85 b1       	in	r24, 0x05	; 5
	value = (adc_high << 8) | adc_low;
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	98 2f       	mov	r25, r24
  ba:	88 27       	eor	r24, r24
	
	return value;
}
  bc:	82 2b       	or	r24, r18
  be:	08 95       	ret

000000c0 <show_adc_led>:

void show_adc_led(unsigned short value)
{
	
	if(value <= CDS_10)	PORTC = 0x00;
  c0:	8f 35       	cpi	r24, 0x5F	; 95
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	92 07       	cpc	r25, r18
  c6:	10 f4       	brcc	.+4      	; 0xcc <show_adc_led+0xc>
  c8:	15 ba       	out	0x15, r1	; 21
  ca:	08 95       	ret
	else if(value <= CDS_20)	PORTC = 0x80;
  cc:	81 39       	cpi	r24, 0x91	; 145
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	92 07       	cpc	r25, r18
  d2:	18 f4       	brcc	.+6      	; 0xda <show_adc_led+0x1a>
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	08 95       	ret
	else if(value <= CDS_50)	PORTC = 0xc0;
  da:	83 3c       	cpi	r24, 0xC3	; 195
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	92 07       	cpc	r25, r18
  e0:	18 f4       	brcc	.+6      	; 0xe8 <show_adc_led+0x28>
  e2:	80 ec       	ldi	r24, 0xC0	; 192
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	08 95       	ret
	else if(value <= CDS_60)	PORTC = 0xe0;
  e8:	85 3f       	cpi	r24, 0xF5	; 245
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	92 07       	cpc	r25, r18
  ee:	18 f4       	brcc	.+6      	; 0xf6 <show_adc_led+0x36>
  f0:	80 ee       	ldi	r24, 0xE0	; 224
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	08 95       	ret
	else if(value <= CDS_70)	PORTC = 0xf0;
  f6:	87 32       	cpi	r24, 0x27	; 39
  f8:	22 e0       	ldi	r18, 0x02	; 2
  fa:	92 07       	cpc	r25, r18
  fc:	18 f4       	brcc	.+6      	; 0x104 <show_adc_led+0x44>
  fe:	80 ef       	ldi	r24, 0xF0	; 240
 100:	85 bb       	out	0x15, r24	; 21
 102:	08 95       	ret
	else if(value <= CDS_80)	PORTC = 0xf8;
 104:	89 35       	cpi	r24, 0x59	; 89
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	92 07       	cpc	r25, r18
 10a:	18 f4       	brcc	.+6      	; 0x112 <show_adc_led+0x52>
 10c:	88 ef       	ldi	r24, 0xF8	; 248
 10e:	85 bb       	out	0x15, r24	; 21
 110:	08 95       	ret
	else if(value <= CDS_90)	PORTC = 0xfc;
 112:	8b 38       	cpi	r24, 0x8B	; 139
 114:	22 e0       	ldi	r18, 0x02	; 2
 116:	92 07       	cpc	r25, r18
 118:	18 f4       	brcc	.+6      	; 0x120 <show_adc_led+0x60>
 11a:	8c ef       	ldi	r24, 0xFC	; 252
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	08 95       	ret
	else if(value <= CDS_100)	PORTC = 0xfe;
 120:	8d 3b       	cpi	r24, 0xBD	; 189
 122:	92 40       	sbci	r25, 0x02	; 2
 124:	18 f4       	brcc	.+6      	; 0x12c <show_adc_led+0x6c>
 126:	8e ef       	ldi	r24, 0xFE	; 254
 128:	85 bb       	out	0x15, r24	; 21
 12a:	08 95       	ret
	else PORTC = 0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret

00000132 <main>:
void show_adc_led(unsigned short data);

int main(void)
{
	unsigned short value;
	DDRC = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	84 bb       	out	0x14, r24	; 20
	DDRF = 0x00;
 136:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	init_adc();
 13a:	b1 df       	rcall	.-158    	; 0x9e <init_adc>
	while (1)
	{
		value = read_adc();
 13c:	b5 df       	rcall	.-150    	; 0xa8 <read_adc>
		show_adc_led(value);
 13e:	c0 df       	rcall	.-128    	; 0xc0 <show_adc_led>
 140:	fd cf       	rjmp	.-6      	; 0x13c <main+0xa>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
