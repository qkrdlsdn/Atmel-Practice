
05_DCMotor_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800100  00800100  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a17  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000873  00000000  00000000  00000ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000486  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000193  00000000  00000000  000020b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	01 c1       	rjmp	.+514    	; 0x24c <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 3c       	cpi	r26, 0xCD	; 205
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2f d0       	rcall	.+94     	; 0x108 <main>
  aa:	53 c1       	rjmp	.+678    	; 0x352 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Port_Init>:
}

void uart_write(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	82 e8       	ldi	r24, 0x82	; 130
  b4:	8f bd       	out	0x2f, r24	; 47
  b6:	8a e1       	ldi	r24, 0x1A	; 26
  b8:	8e bd       	out	0x2e, r24	; 46
  ba:	1b bc       	out	0x2b, r1	; 43
  bc:	1a bc       	out	0x2a, r1	; 42
  be:	19 bc       	out	0x29, r1	; 41
  c0:	18 bc       	out	0x28, r1	; 40
  c2:	84 e6       	ldi	r24, 0x64	; 100
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	97 bd       	out	0x27, r25	; 39
  c8:	86 bd       	out	0x26, r24	; 38
  ca:	11 ba       	out	0x11, r1	; 17
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 bb       	out	0x14, r24	; 20
  d0:	08 95       	ret

000000d2 <DC_Motor>:
  d2:	99 23       	and	r25, r25
  d4:	14 f4       	brge	.+4      	; 0xda <DC_Motor+0x8>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	85 36       	cpi	r24, 0x65	; 101
  dc:	91 05       	cpc	r25, r1
  de:	14 f0       	brlt	.+4      	; 0xe4 <DC_Motor+0x12>
  e0:	84 e6       	ldi	r24, 0x64	; 100
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9b bd       	out	0x2b, r25	; 43
  e6:	8a bd       	out	0x2a, r24	; 42
  e8:	08 95       	ret

000000ea <Btn_click>:
  ea:	90 b3       	in	r25, 0x10	; 16
  ec:	89 23       	and	r24, r25
  ee:	19 f4       	brne	.+6      	; 0xf6 <Btn_click+0xc>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret

000000fc <uart_init>:
  fc:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 100:	89 b9       	out	0x09, r24	; 9
 102:	88 e9       	ldi	r24, 0x98	; 152
 104:	8a b9       	out	0x0a, r24	; 10
 106:	08 95       	ret

00000108 <main>:
}

int main(void)
{
	int speed = 0;
	Port_Init();
 108:	d2 df       	rcall	.-92     	; 0xae <Port_Init>
	
	uart_init(BAUDRATE(9600));
 10a:	87 e6       	ldi	r24, 0x67	; 103
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	f6 df       	rcall	.-20     	; 0xfc <uart_init>
	sei();	
 110:	78 94       	sei
	UDR0 = data;
}

int main(void)
{
	int speed = 0;
 112:	c0 e0       	ldi	r28, 0x00	; 0
	sei();	
	
	while(1)
	{
		// up
		if(Btn_click(0x01))
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	e8 df       	rcall	.-48     	; 0xea <Btn_click>
 11a:	89 2b       	or	r24, r25
		{
			while(Btn_click(0x01));
 11c:	d9 f0       	breq	.+54     	; 0x154 <main+0x4c>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	e4 df       	rcall	.-56     	; 0xea <Btn_click>
 122:	89 2b       	or	r24, r25
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x16>
			
			if(speed/10 < 6)	speed = 60;
 126:	cc 33       	cpi	r28, 0x3C	; 60
 128:	d1 05       	cpc	r29, r1
			else	speed = ((speed/10)*10)+10;
 12a:	94 f0       	brlt	.+36     	; 0x150 <main+0x48>
 12c:	ce 01       	movw	r24, r28
 12e:	6a e0       	ldi	r22, 0x0A	; 10
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	e8 d0       	rcall	.+464    	; 0x304 <__divmodhi4>
 134:	6f 5f       	subi	r22, 0xFF	; 255
 136:	7f 4f       	sbci	r23, 0xFF	; 255
 138:	eb 01       	movw	r28, r22
 13a:	cc 0f       	add	r28, r28
 13c:	dd 1f       	adc	r29, r29
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	66 0f       	add	r22, r22
 144:	77 1f       	adc	r23, r23
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	c6 0f       	add	r28, r22
 14c:	d7 1f       	adc	r29, r23
		// up
		if(Btn_click(0x01))
		{
			while(Btn_click(0x01));
			
			if(speed/10 < 6)	speed = 60;
 14e:	02 c0       	rjmp	.+4      	; 0x154 <main+0x4c>
 150:	cc e3       	ldi	r28, 0x3C	; 60
			else	speed = ((speed/10)*10)+10;
		}
		//down
		if(Btn_click(0x02))
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	c9 df       	rcall	.-110    	; 0xea <Btn_click>
 158:	89 2b       	or	r24, r25
		{
			while(Btn_click(0x02));
 15a:	d9 f0       	breq	.+54     	; 0x192 <main+0x8a>
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	c5 df       	rcall	.-118    	; 0xea <Btn_click>
 160:	89 2b       	or	r24, r25
			if(speed/10 <= 6) speed = 0;
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x54>
 164:	c6 34       	cpi	r28, 0x46	; 70
 166:	d1 05       	cpc	r29, r1
			else	speed = ((speed/10)*10)-10;
 168:	94 f0       	brlt	.+36     	; 0x18e <main+0x86>
 16a:	ce 01       	movw	r24, r28
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	c9 d0       	rcall	.+402    	; 0x304 <__divmodhi4>
 172:	61 50       	subi	r22, 0x01	; 1
 174:	71 09       	sbc	r23, r1
 176:	eb 01       	movw	r28, r22
 178:	cc 0f       	add	r28, r28
 17a:	dd 1f       	adc	r29, r29
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	c6 0f       	add	r28, r22
 18a:	d7 1f       	adc	r29, r23
		}
		//down
		if(Btn_click(0x02))
		{
			while(Btn_click(0x02));
			if(speed/10 <= 6) speed = 0;
 18c:	02 c0       	rjmp	.+4      	; 0x192 <main+0x8a>
 18e:	c0 e0       	ldi	r28, 0x00	; 0
			else	speed = ((speed/10)*10)-10;
		}
		//stop
		if(Btn_click(0x04))
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	aa df       	rcall	.-172    	; 0xea <Btn_click>
 196:	89 2b       	or	r24, r25
 198:	31 f0       	breq	.+12     	; 0x1a6 <main+0x9e>
		{
			while(Btn_click(0x04));
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	a6 df       	rcall	.-180    	; 0xea <Btn_click>
 19e:	89 2b       	or	r24, r25
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x92>
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
			speed = 0;
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USART1_rx_end>
		}
		//uart
		if(USART1_rx_end == 1)
 1aa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <USART1_rx_end+0x1>
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	21 f5       	brne	.+72     	; 0x1fa <main+0xf2>
 1b2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USART1_rx_end+0x1>
		{
			USART1_rx_end = 0;
 1b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USART1_rx_end>
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Rx_Buffer+0x1>
			//USART1_len = 0;
			
			if(Rx_Buffer[1]=='0')speed = 0;
 1be:	80 33       	cpi	r24, 0x30	; 48
 1c0:	59 f0       	breq	.+22     	; 0x1d8 <main+0xd0>
 1c2:	86 33       	cpi	r24, 0x36	; 54
			else if(Rx_Buffer[1]=='6')speed = 60;
 1c4:	61 f0       	breq	.+24     	; 0x1de <main+0xd6>
 1c6:	87 33       	cpi	r24, 0x37	; 55
			else if(Rx_Buffer[1]=='7')speed = 70;
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <main+0xdc>
 1ca:	88 33       	cpi	r24, 0x38	; 56
			else if(Rx_Buffer[1]=='8')speed = 80;
 1cc:	71 f0       	breq	.+28     	; 0x1ea <main+0xe2>
 1ce:	89 33       	cpi	r24, 0x39	; 57
			else if(Rx_Buffer[1]=='9')speed = 90;
 1d0:	79 f0       	breq	.+30     	; 0x1f0 <main+0xe8>
 1d2:	81 33       	cpi	r24, 0x31	; 49
			else if(Rx_Buffer[1]=='1')speed = 100;
 1d4:	91 f4       	brne	.+36     	; 0x1fa <main+0xf2>
 1d6:	0f c0       	rjmp	.+30     	; 0x1f6 <main+0xee>
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
		if(USART1_rx_end == 1)
		{
			USART1_rx_end = 0;
			//USART1_len = 0;
			
			if(Rx_Buffer[1]=='0')speed = 0;
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	0e c0       	rjmp	.+28     	; 0x1fa <main+0xf2>
 1de:	cc e3       	ldi	r28, 0x3C	; 60
			else if(Rx_Buffer[1]=='6')speed = 60;
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
 1e2:	0b c0       	rjmp	.+22     	; 0x1fa <main+0xf2>
 1e4:	c6 e4       	ldi	r28, 0x46	; 70
			else if(Rx_Buffer[1]=='7')speed = 70;
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <main+0xf2>
 1ea:	c0 e5       	ldi	r28, 0x50	; 80
			else if(Rx_Buffer[1]=='8')speed = 80;
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <main+0xf2>
 1f0:	ca e5       	ldi	r28, 0x5A	; 90
			else if(Rx_Buffer[1]=='9')speed = 90;
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <main+0xf2>
 1f6:	c4 e6       	ldi	r28, 0x64	; 100
			else if(Rx_Buffer[1]=='1')speed = 100;
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	c5 36       	cpi	r28, 0x65	; 101
			
		}
		
		if (speed > 100)	speed = 100;
 1fc:	d1 05       	cpc	r29, r1
 1fe:	14 f0       	brlt	.+4      	; 0x204 <main+0xfc>
 200:	c4 e6       	ldi	r28, 0x64	; 100
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	dd 23       	and	r29, r29
		if (speed < 0)	speed = 0;
 206:	14 f4       	brge	.+4      	; 0x20c <main+0x104>
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	20 97       	sbiw	r28, 0x00	; 0
		
		if(speed == 0)	PORTC = 0xFE;
 20e:	11 f4       	brne	.+4      	; 0x214 <main+0x10c>
 210:	8e ef       	ldi	r24, 0xFE	; 254
 212:	85 bb       	out	0x15, r24	; 21
 214:	cc 33       	cpi	r28, 0x3C	; 60
		if(speed == 60)	PORTC = 0xFD;
 216:	d1 05       	cpc	r29, r1
 218:	11 f4       	brne	.+4      	; 0x21e <main+0x116>
 21a:	8d ef       	ldi	r24, 0xFD	; 253
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	c6 34       	cpi	r28, 0x46	; 70
		if(speed == 70)	PORTC = 0xFB;
 220:	d1 05       	cpc	r29, r1
 222:	11 f4       	brne	.+4      	; 0x228 <main+0x120>
 224:	8b ef       	ldi	r24, 0xFB	; 251
 226:	85 bb       	out	0x15, r24	; 21
 228:	c0 35       	cpi	r28, 0x50	; 80
		if(speed == 80)	PORTC = 0xF7;
 22a:	d1 05       	cpc	r29, r1
 22c:	11 f4       	brne	.+4      	; 0x232 <main+0x12a>
 22e:	87 ef       	ldi	r24, 0xF7	; 247
 230:	85 bb       	out	0x15, r24	; 21
 232:	ca 35       	cpi	r28, 0x5A	; 90
		if(speed == 90)	PORTC = 0xEF;
 234:	d1 05       	cpc	r29, r1
 236:	11 f4       	brne	.+4      	; 0x23c <main+0x134>
 238:	8f ee       	ldi	r24, 0xEF	; 239
 23a:	85 bb       	out	0x15, r24	; 21
		if(speed == 100)	PORTC = 0xDF;
 23c:	c4 36       	cpi	r28, 0x64	; 100
 23e:	d1 05       	cpc	r29, r1
 240:	11 f4       	brne	.+4      	; 0x246 <main+0x13e>
 242:	8f ed       	ldi	r24, 0xDF	; 223
 244:	85 bb       	out	0x15, r24	; 21
		
		DC_Motor(speed);
 246:	ce 01       	movw	r24, r28
 248:	44 df       	rcall	.-376    	; 0xd2 <DC_Motor>
 24a:	65 cf       	rjmp	.-310    	; 0x116 <main+0xe>

0000024c <__vector_18>:
		//uart_send(speed);
	}
 24c:	1f 92       	push	r1
}

ISR(USART0_RX_vect)
{
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	0b b6       	in	r0, 0x3b	; 59
 258:	0f 92       	push	r0
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	static uint8_t usart1_chk=0;
	unsigned char buf = UDR0;
 266:	9c b1       	in	r25, 0x0c	; 12
	
	USART1_rx_end=0;
 268:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USART1_rx_end+0x1>
 26c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USART1_rx_end>
	switch(usart1_chk)
 270:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 274:	88 23       	and	r24, r24
 276:	19 f0       	breq	.+6      	; 0x27e <__vector_18+0x32>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	c1 f0       	breq	.+48     	; 0x2ac <__vector_18+0x60>
 27c:	34 c0       	rjmp	.+104    	; 0x2e6 <__vector_18+0x9a>
	{
		case 0:
		if(buf ==0x02){
 27e:	92 30       	cpi	r25, 0x02	; 2
 280:	91 f4       	brne	.+36     	; 0x2a6 <__vector_18+0x5a>
			Rx_Buffer[USART1_len]= buf;
 282:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <USART1_len>
 286:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <USART1_len+0x1>
 28a:	f9 01       	movw	r30, r18
 28c:	eb 5f       	subi	r30, 0xFB	; 251
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	90 83       	st	Z, r25
			USART1_len++;
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <USART1_len+0x1>
 29a:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <USART1_len>
			usart1_chk=1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2a4:	22 c0       	rjmp	.+68     	; 0x2ea <__vector_18+0x9e>
		}
		else usart1_chk=0;
 2a6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2aa:	1f c0       	rjmp	.+62     	; 0x2ea <__vector_18+0x9e>
		break;
		case 1:
		Rx_Buffer[USART1_len]= buf;
 2ac:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <USART1_len>
 2b0:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <USART1_len+0x1>
 2b4:	f9 01       	movw	r30, r18
 2b6:	eb 5f       	subi	r30, 0xFB	; 251
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	90 83       	st	Z, r25
		USART1_len++;
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <USART1_len+0x1>
 2c4:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <USART1_len>
		
		if(buf ==0x03){
 2c8:	93 30       	cpi	r25, 0x03	; 3
 2ca:	79 f4       	brne	.+30     	; 0x2ea <__vector_18+0x9e>
			USART1_rx_end=1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <USART1_rx_end+0x1>
 2d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <USART1_rx_end>
			usart1_chk=0;
 2d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			USART1_len=0;
 2dc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USART1_len+0x1>
 2e0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <USART1_len>
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__vector_18+0x9e>
		}
		break;
		default :
		usart1_chk=0;
 2e6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		break;
	}
	
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0b be       	out	0x3b, r0	; 59
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__divmodhi4>:
 304:	97 fb       	bst	r25, 7
 306:	07 2e       	mov	r0, r23
 308:	16 f4       	brtc	.+4      	; 0x30e <__divmodhi4+0xa>
 30a:	00 94       	com	r0
 30c:	06 d0       	rcall	.+12     	; 0x31a <__divmodhi4_neg1>
 30e:	77 fd       	sbrc	r23, 7
 310:	08 d0       	rcall	.+16     	; 0x322 <__divmodhi4_neg2>
 312:	0b d0       	rcall	.+22     	; 0x32a <__udivmodhi4>
 314:	07 fc       	sbrc	r0, 7
 316:	05 d0       	rcall	.+10     	; 0x322 <__divmodhi4_neg2>
 318:	3e f4       	brtc	.+14     	; 0x328 <__divmodhi4_exit>

0000031a <__divmodhi4_neg1>:
 31a:	90 95       	com	r25
 31c:	81 95       	neg	r24
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	08 95       	ret

00000322 <__divmodhi4_neg2>:
 322:	70 95       	com	r23
 324:	61 95       	neg	r22
 326:	7f 4f       	sbci	r23, 0xFF	; 255

00000328 <__divmodhi4_exit>:
 328:	08 95       	ret

0000032a <__udivmodhi4>:
 32a:	aa 1b       	sub	r26, r26
 32c:	bb 1b       	sub	r27, r27
 32e:	51 e1       	ldi	r21, 0x11	; 17
 330:	07 c0       	rjmp	.+14     	; 0x340 <__udivmodhi4_ep>

00000332 <__udivmodhi4_loop>:
 332:	aa 1f       	adc	r26, r26
 334:	bb 1f       	adc	r27, r27
 336:	a6 17       	cp	r26, r22
 338:	b7 07       	cpc	r27, r23
 33a:	10 f0       	brcs	.+4      	; 0x340 <__udivmodhi4_ep>
 33c:	a6 1b       	sub	r26, r22
 33e:	b7 0b       	sbc	r27, r23

00000340 <__udivmodhi4_ep>:
 340:	88 1f       	adc	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	5a 95       	dec	r21
 346:	a9 f7       	brne	.-22     	; 0x332 <__udivmodhi4_loop>
 348:	80 95       	com	r24
 34a:	90 95       	com	r25
 34c:	bc 01       	movw	r22, r24
 34e:	cd 01       	movw	r24, r26
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
