
TouchSensor1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000246  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ff  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000875  00000000  00000000  00000d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033f  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043c  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000213  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	83 d0       	rcall	.+262    	; 0x1ba <main>
  b4:	c6 c0       	rjmp	.+396    	; 0x242 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <printFnd>:
#include <util/delay.h>

uint8_t fnd[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x02, 0xf8, 0x80, 0x10};

void printFnd(int number)
{
  b8:	af 92       	push	r10
  ba:	bf 92       	push	r11
  bc:	cf 92       	push	r12
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	28 97       	sbiw	r28, 0x08	; 8
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	9c 01       	movw	r18, r24
	int num[4];
	
	num[0] = number%10;
  de:	0a e0       	ldi	r16, 0x0A	; 10
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	b8 01       	movw	r22, r16
  e4:	87 d0       	rcall	.+270    	; 0x1f4 <__divmodhi4>
  e6:	fc 01       	movw	r30, r24
	num[1] = ((number%100)-(number%10)) / 10;
  e8:	0f 2e       	mov	r0, r31
  ea:	f4 e6       	ldi	r31, 0x64	; 100
  ec:	cf 2e       	mov	r12, r31
  ee:	d1 2c       	mov	r13, r1
  f0:	f0 2d       	mov	r31, r0
  f2:	c9 01       	movw	r24, r18
  f4:	b6 01       	movw	r22, r12
  f6:	7e d0       	rcall	.+252    	; 0x1f4 <__divmodhi4>
  f8:	5c 01       	movw	r10, r24
  fa:	8e 1b       	sub	r24, r30
  fc:	9f 0b       	sbc	r25, r31
  fe:	b8 01       	movw	r22, r16
 100:	79 d0       	rcall	.+242    	; 0x1f4 <__divmodhi4>
 102:	7c 83       	std	Y+4, r23	; 0x04
 104:	6b 83       	std	Y+3, r22	; 0x03
	num[2] = ((number%1000)-(number%100)) / 100;
 106:	08 ee       	ldi	r16, 0xE8	; 232
 108:	13 e0       	ldi	r17, 0x03	; 3
 10a:	c9 01       	movw	r24, r18
 10c:	b8 01       	movw	r22, r16
 10e:	72 d0       	rcall	.+228    	; 0x1f4 <__divmodhi4>
 110:	7c 01       	movw	r14, r24
 112:	8a 19       	sub	r24, r10
 114:	9b 09       	sbc	r25, r11
 116:	b6 01       	movw	r22, r12
 118:	6d d0       	rcall	.+218    	; 0x1f4 <__divmodhi4>
 11a:	7e 83       	std	Y+6, r23	; 0x06
 11c:	6d 83       	std	Y+5, r22	; 0x05
	num[3] = (number-(number%1000)) / 1000;
 11e:	c9 01       	movw	r24, r18
 120:	8e 19       	sub	r24, r14
 122:	9f 09       	sbc	r25, r15
 124:	b8 01       	movw	r22, r16
 126:	66 d0       	rcall	.+204    	; 0x1f4 <__divmodhi4>
 128:	78 87       	std	Y+8, r23	; 0x08
 12a:	6f 83       	std	Y+7, r22	; 0x07
 12c:	e0 50       	subi	r30, 0x00	; 0
	
	PORTB=fnd[num[0]];
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	80 81       	ld	r24, Z
 132:	88 bb       	out	0x18, r24	; 24
 134:	88 e0       	ldi	r24, 0x08	; 8
	PORTE=0x08; //일의 자리
 136:	83 b9       	out	0x03, r24	; 3
 138:	8f ed       	ldi	r24, 0xDF	; 223
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	9e e2       	ldi	r25, 0x2E	; 46
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <printFnd+0x84>
 140:	00 c0       	rjmp	.+0      	; 0x142 <printFnd+0x8a>
 142:	00 00       	nop
 144:	eb 81       	ldd	r30, Y+3	; 0x03
	_delay_ms(3);
	PORTB=fnd[num[1]];
 146:	fc 81       	ldd	r31, Y+4	; 0x04
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	88 bb       	out	0x18, r24	; 24
 150:	84 e0       	ldi	r24, 0x04	; 4
	PORTE=0x04; //십의 자리
 152:	83 b9       	out	0x03, r24	; 3
 154:	8f ed       	ldi	r24, 0xDF	; 223
 156:	9e e2       	ldi	r25, 0x2E	; 46
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <printFnd+0xa0>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <printFnd+0xa6>
 15e:	00 00       	nop
 160:	ed 81       	ldd	r30, Y+5	; 0x05
	_delay_ms(3);
	PORTB=fnd[num[2]];
 162:	fe 81       	ldd	r31, Y+6	; 0x06
 164:	e0 50       	subi	r30, 0x00	; 0
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	80 81       	ld	r24, Z
 16a:	88 bb       	out	0x18, r24	; 24
 16c:	82 e0       	ldi	r24, 0x02	; 2
	PORTE=0x02; //백의 자리
 16e:	83 b9       	out	0x03, r24	; 3
 170:	8f ed       	ldi	r24, 0xDF	; 223
 172:	9e e2       	ldi	r25, 0x2E	; 46
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <printFnd+0xbc>
 178:	00 c0       	rjmp	.+0      	; 0x17a <printFnd+0xc2>
 17a:	00 00       	nop
 17c:	ef 81       	ldd	r30, Y+7	; 0x07
	_delay_ms(3);
	PORTB=fnd[num[3]];
 17e:	f8 85       	ldd	r31, Y+8	; 0x08
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
 186:	88 bb       	out	0x18, r24	; 24
 188:	81 e0       	ldi	r24, 0x01	; 1
	PORTE=0x01; //천의 자리
 18a:	83 b9       	out	0x03, r24	; 3
 18c:	8f ed       	ldi	r24, 0xDF	; 223
 18e:	9e e2       	ldi	r25, 0x2E	; 46
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <printFnd+0xd8>
 194:	00 c0       	rjmp	.+0      	; 0x196 <printFnd+0xde>
 196:	00 00       	nop
 198:	28 96       	adiw	r28, 0x08	; 8
	_delay_ms(3);
}
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	08 95       	ret

000001ba <main>:
 1ba:	1a ba       	out	0x1a, r1	; 26

int main(void)
{
	DDRA = 0x00;
	DDRB = 0xff;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	87 bb       	out	0x17, r24	; 23
	DDRE = 0x0f;
 1c0:	8f e0       	ldi	r24, 0x0F	; 15
 1c2:	82 b9       	out	0x02, r24	; 2
	
	int count = 0;
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
	
    while (1) 
    {
		if ((PINA & 0x02) == 0x00)
 1c8:	c9 9b       	sbis	0x19, 1	; 25
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <main+0x18>
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <main+0x20>
		{
			while((PINA & 0x02) == 0x00)
				printFnd(count);
 1ce:	ce 01       	movw	r24, r28
 1d0:	73 df       	rcall	.-282    	; 0xb8 <printFnd>
	
    while (1) 
    {
		if ((PINA & 0x02) == 0x00)
		{
			while((PINA & 0x02) == 0x00)
 1d2:	c9 9b       	sbis	0x19, 1	; 25
 1d4:	fc cf       	rjmp	.-8      	; 0x1ce <main+0x14>
				printFnd(count);
			
			count = 0;
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		if ((PINA | 0xfe) == 0xff)
 1da:	89 b3       	in	r24, 0x19	; 25
 1dc:	8e 6f       	ori	r24, 0xFE	; 254
 1de:	8f 3f       	cpi	r24, 0xFF	; 255
 1e0:	31 f4       	brne	.+12     	; 0x1ee <main+0x34>
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <main+0x2e>
		{
			while((PINA & 0x01) == 0x00)
			printFnd(count);
 1e4:	ce 01       	movw	r24, r28
 1e6:	68 df       	rcall	.-304    	; 0xb8 <printFnd>
			count = 0;
		}
		
		if ((PINA | 0xfe) == 0xff)
		{
			while((PINA & 0x01) == 0x00)
 1e8:	c8 9b       	sbis	0x19, 0	; 25
 1ea:	fc cf       	rjmp	.-8      	; 0x1e4 <main+0x2a>
			printFnd(count);
			
			count++;
		}
		
		printFnd(count);
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	ce 01       	movw	r24, r28
 1f0:	63 df       	rcall	.-314    	; 0xb8 <printFnd>
    }
 1f2:	ea cf       	rjmp	.-44     	; 0x1c8 <main+0xe>

000001f4 <__divmodhi4>:
 1f4:	97 fb       	bst	r25, 7
 1f6:	07 2e       	mov	r0, r23
 1f8:	16 f4       	brtc	.+4      	; 0x1fe <__divmodhi4+0xa>
 1fa:	00 94       	com	r0
 1fc:	06 d0       	rcall	.+12     	; 0x20a <__divmodhi4_neg1>
 1fe:	77 fd       	sbrc	r23, 7
 200:	08 d0       	rcall	.+16     	; 0x212 <__divmodhi4_neg2>
 202:	0b d0       	rcall	.+22     	; 0x21a <__udivmodhi4>
 204:	07 fc       	sbrc	r0, 7
 206:	05 d0       	rcall	.+10     	; 0x212 <__divmodhi4_neg2>
 208:	3e f4       	brtc	.+14     	; 0x218 <__divmodhi4_exit>

0000020a <__divmodhi4_neg1>:
 20a:	90 95       	com	r25
 20c:	81 95       	neg	r24
 20e:	9f 4f       	sbci	r25, 0xFF	; 255
 210:	08 95       	ret

00000212 <__divmodhi4_neg2>:
 212:	70 95       	com	r23
 214:	61 95       	neg	r22
 216:	7f 4f       	sbci	r23, 0xFF	; 255

00000218 <__divmodhi4_exit>:
 218:	08 95       	ret

0000021a <__udivmodhi4>:
 21a:	aa 1b       	sub	r26, r26
 21c:	bb 1b       	sub	r27, r27
 21e:	51 e1       	ldi	r21, 0x11	; 17
 220:	07 c0       	rjmp	.+14     	; 0x230 <__udivmodhi4_ep>

00000222 <__udivmodhi4_loop>:
 222:	aa 1f       	adc	r26, r26
 224:	bb 1f       	adc	r27, r27
 226:	a6 17       	cp	r26, r22
 228:	b7 07       	cpc	r27, r23
 22a:	10 f0       	brcs	.+4      	; 0x230 <__udivmodhi4_ep>
 22c:	a6 1b       	sub	r26, r22
 22e:	b7 0b       	sbc	r27, r23

00000230 <__udivmodhi4_ep>:
 230:	88 1f       	adc	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	5a 95       	dec	r21
 236:	a9 f7       	brne	.-22     	; 0x222 <__udivmodhi4_loop>
 238:	80 95       	com	r24
 23a:	90 95       	com	r25
 23c:	bc 01       	movw	r22, r24
 23e:	cd 01       	movw	r24, r26
 240:	08 95       	ret

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
